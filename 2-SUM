(using 2 pointer)

string twoSum(int n, vector<int> &arr, int target) {
    sort(arr.begin(), arr.end());
    int left = 0, right = n - 1;
    while (left < right) {
        int sum = arr[left] + arr[right];
        if (sum == target) {
            return "YES";
        }
        else if (sum < target) left++;
        else right--;
    }
    return "NO";
}

or

(Using hashmap)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       map<int,int>mpp;
       for(int i=0;i<nums.size();i++)
       {
           int a= nums[i];
           int more=target-a;
           if(mpp.find(more)!= mpp.end())   //if found then we will not point till the last
           {
               return {mpp[more],i};
           }
           mpp[a]=i;
       } 
       return {-1,-1};
    }
};
