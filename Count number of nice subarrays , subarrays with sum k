class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        int n=nums.size();
        int i=0;
        //Updating even to 0 and odd to 1
        while(i!=n){
            if(nums[i]%2!=0)
            nums[i]=1;
            else
            nums[i]=0;
            i++;
        }
        //simple use subarray with sum k problem logic
        int Subarray_count=0;
        unordered_map<int,int>map;
        int sum=0;
        i=0;
        while(i!=n)
        {
            sum+=nums[i];
                if(sum==k) Subarray_count++;

                if(map.find(sum-k)!=map.end())
                {
                    Subarray_count+=map[sum-k];
                }
                map[sum]++;
                i++;
            
            
        }
        return Subarray_count;
    }
};
